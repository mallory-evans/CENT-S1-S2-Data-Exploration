##################################################################################
inputs: CENT_dct.csv, CENT_dct_cont_spread.csv, CENT_dct_spread.csv,
        s1_s2_cont_dct.csv, s1_s2_dct.csv
output: K-means clustering (3 and 5 clusters for S1, S1 & S2 normalized separately,
       and S1 & S2 normalized together)
###################################################################################


# Season 1 Show Curve Clustering

```{r}
library(dplyr)
library(ggplot2)
library(plotly)
library(purrr)
library(tidyverse)
library(syuzhet)
library(broom)
library(factoextra)
library(dtwclust)
```

```{r}
dct <- read.csv("CENT_dct.csv")
dct_spread <- read.csv("CENT_dct_spread.csv")
```

```{r}
s1_cluster <- dct_spread %>% 
  filter(Season_num == 1) %>%
  ungroup() %>%
  select(-X, -Network, -Season_num, -Show_Name)
```

## General K-Means Clustering

Using example from https://cran.r-project.org/web/packages/broom/vignettes/kmeans.html.

```{r}
set.seed(12)
kclusts <- data.frame(k = 1:5) %>% 
  group_by(k) %>% 
  do(kclust = kmeans(s1_cluster, centers = .$k, nstart = 50))
```

```{r}
clusters <- kclusts %>% group_by(k) %>% do(tidy(.$kclust[[1]]))
assignments <- kclusts %>% group_by(k) %>% do(augment(.$kclust[[1]], s1_cluster))
clusterings <- kclusts %>% group_by(k) %>% do(glance(.$kclust[[1]]))
```


###Optimal N of Clusters
```{r}
ggplot(clusterings, aes(k, tot.withinss)) + 
  geom_line() +
  scale_x_discrete(limits = seq(1, 15))
```

```{r}
fviz_nbclust(s1_cluster, 
             kmeans, 
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_cluster, 
             cluster::pam, 
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_cluster, 
             hcut, 
             hc_method = "single",
             hc_metric = "euclidean",
             method = "gap_stat",
             k.max = 15)
```

```{r}
fviz_nbclust(s1_cluster, 
             hcut, 
             hc_method = "single",
             hc_metric = "pearson",
             method = "silhouette",
             k.max = 15,
             nboot = 500)
```

### 3 Clusters (K-means)

```{r}
dct_clusters <- assignments %>% 
  filter(k == 3) %>% 
  ungroup() %>% 
  select(.cluster) %>% 
  rename(cluster_kmeans_3 = .cluster) %>% 
  bind_cols(filter(dct_spread, Season_num == 1)) 
```

```{r}
dct_clusters <- merge(dct_clusters[, c("cluster_kmeans_3", 
                                       "Show_Name")], 
                         dct, by = "Show_Name")
```

```{r}
g <- dct_clusters %>% 
  filter(Season_num == 1) %>% 
  ggplot(aes(x = period, y = dct_values, 
             color = Show_Name)) + 
  geom_line() + 
  facet_wrap(~ cluster_kmeans_3)

ggplotly(g)
```

### 5 Clusters (K-means)

```{r}
dct_clusters <- assignments %>% 
  filter(k == 5) %>% 
  ungroup() %>% 
  select(.cluster) %>% 
  rename(cluster_kmeans_5 = .cluster) %>% 
  bind_cols(filter(dct_spread, Season_num == 1)) 
```

```{r}
dct_clusters <- merge(dct_clusters[, c("cluster_kmeans_5", 
                                       "Show_Name")], 
                         dct, by = "Show_Name")
```

```{r}
g <- dct_clusters %>% 
  filter(Season_num == 1) %>% 
  ggplot(aes(x = period, y = dct_values, 
             color = Show_Name)) + 
  geom_line() + 
  facet_wrap(~ cluster_kmeans_5)

ggplotly(g)
```



-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------


#Season 1 and 2 Curve Clustering

```{r}
temp1 <- filter(dct_spread, Season_num == 1)
temp2 <- filter(dct_spread, Season_num == 2)
temp2_newcols <- c(paste("X", 101:200, sep = ""))
colnames(temp2)[5:ncol(temp2)] <- c(temp2_newcols)

dct_spread_s2 <- bind_cols(temp1, temp2[, 5:ncol(temp2)])
rm(temp1, temp2, temp2_newcols)

s1_s2_cluster <- dct_spread_s2 %>%
  select(-X, -Network, -Season_num, -Show_Name)

s1_s2_dct <- read.csv("s1_s2_dct.csv")

```

## General K-Means Clustering

```{r}

set.seed(12)
kclusts_2 <- data.frame(k = 1:5) %>% 
  group_by(k) %>% 
  do(kclust = kmeans(s1_s2_cluster, centers = .$k, nstart = 50))

```

```{r}
clusters_2 <- kclusts_2 %>% group_by(k) %>% do(tidy(.$kclust[[1]]))
assignments_2 <- kclusts_2 %>% group_by(k) %>% do(augment(.$kclust[[1]], s1_s2_cluster))
clusterings_2 <- kclusts_2 %>% group_by(k) %>% do(glance(.$kclust[[1]]))
```


###Optimal N of Clusters
```{r}
ggplot(clusterings_2, aes(k, tot.withinss)) + 
  geom_line() +
  scale_x_discrete(limits = seq(1, 5))
```

```{r}
fviz_nbclust(s1_s2_cluster, 
             kmeans, 
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_s2_cluster, 
             cluster::pam, 
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_s2_cluster, 
             hcut, 
             hc_method = "single",
             hc_metric = "euclidean",
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_s2_cluster, 
             hcut, 
             hc_method = "single",
             hc_metric = "pearson",
             method = "silhouette",
             k.max = 5,
             nboot = 500)
```

### 3 Clusters (K-means)

```{r}
dct_clusters_2 <- assignments_2 %>% 
  filter(k == 3) %>% 
  ungroup() %>% 
  select(.cluster) %>% 
  rename(cluster_kmeans_3 = .cluster) %>% 
  bind_cols(dct_spread_s2) 
```

```{r}
dct_clusters_2 <- merge(dct_clusters_2[, c("cluster_kmeans_3", 
                                       "Show_Name")], 
                         s1_s2_dct, by = "Show_Name")
```

```{r}
g <- dct_clusters_2 %>% 
  ggplot(aes(x = period, y = dct_values, 
             color = Show_Name)) + 
  geom_line() + 
  facet_wrap(~ cluster_kmeans_3)

ggplotly(g)
```

### 5 Clusters (K-means)

```{r}
dct_clusters_2 <- assignments_2 %>% 
  filter(k == 5) %>% 
  ungroup() %>% 
  select(.cluster) %>% 
  rename(cluster_kmeans_5 = .cluster) %>% 
  bind_cols(dct_spread_s2) 
```

```{r}
dct_clusters_2 <- merge(dct_clusters_2[, c("cluster_kmeans_5", 
                                       "Show_Name")], 
                         s1_s2_dct, by = "Show_Name")
```

```{r}
g <- dct_clusters_2 %>%
  ggplot(aes(x = period, y = dct_values, 
             color = Show_Name)) + 
  geom_line() + 
  facet_wrap(~ cluster_kmeans_5)

ggplotly(g)
```




-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------



#Season 1 and 2 Continuous Curve Clustering

```{r}
s1_s2_cont_dct <- read.csv("s1_s2_cont_dct.csv")
s1_s2_spread_cont <- read.csv("CENT_dct_cont_spread.csv")
s1_s2_cont_clusters <- s1_s2_spread_cont%>%
  select(-X, -Network, -Show_Name)
```

## General K-Means Clustering

```{r}

set.seed(12)
kclusts_3 <- data.frame(k = 1:5) %>% 
  group_by(k) %>% 
  do(kclust = kmeans(s1_s2_cont_clusters, centers = .$k, nstart = 50))

```

```{r}
clusters_3 <- kclusts_3 %>% group_by(k) %>% do(tidy(.$kclust[[1]]))
assignments_3 <- kclusts_3 %>% group_by(k) %>% do(augment(.$kclust[[1]], s1_s2_cont_clusters))
clusterings_3 <- kclusts_3 %>% group_by(k) %>% do(glance(.$kclust[[1]]))
```


###Optimal N of Clusters
```{r}
ggplot(clusterings_3, aes(k, tot.withinss)) + 
  geom_line() +
  scale_x_discrete(limits = seq(1, 5))
```

```{r}
fviz_nbclust(s1_s2_cont_clusters, 
             kmeans, 
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_s2_cont_clusters, 
             cluster::pam, 
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_s2_cont_clusters, 
             hcut, 
             hc_method = "single",
             hc_metric = "euclidean",
             method = "gap_stat",
             k.max = 5)
```

```{r}
fviz_nbclust(s1_s2_cont_clusters, 
             hcut, 
             hc_method = "single",
             hc_metric = "pearson",
             method = "silhouette",
             k.max = 5,
             nboot = 500)
```

### 3 Clusters (K-means)

```{r}
dct_clusters_3 <- assignments_3 %>% 
  filter(k == 3) %>% 
  ungroup() %>% 
  select(.cluster) %>% 
  rename(cluster_kmeans_3 = .cluster) %>% 
  bind_cols(s1_s2_spread_cont) 
```

```{r}
dct_clusters_3 <- merge(dct_clusters_3[, c("cluster_kmeans_3", 
                                       "Show_Name")], 
                         s1_s2_cont_dct , by = "Show_Name")
```

```{r}
g <- dct_clusters_3 %>% 
  ggplot(aes(x = period, y = dct_values, 
             color = Show_Name)) + 
  geom_line() + 
  facet_wrap(~ cluster_kmeans_3)

ggplotly(g)
```

### 5 Clusters (K-means)

```{r}
dct_clusters_3 <- assignments_3 %>% 
  filter(k == 5) %>% 
  ungroup() %>% 
  select(.cluster) %>% 
  rename(cluster_kmeans_5 = .cluster) %>% 
  bind_cols(s1_s2_spread_cont) 
```

```{r}
dct_clusters_3 <- merge(dct_clusters_3[, c("cluster_kmeans_5", 
                                       "Show_Name")], 
                          s1_s2_cont_dct, by = "Show_Name")
```

```{r}
g <- dct_clusters_3 %>%
  ggplot(aes(x = period, y = dct_values, 
             color = Show_Name)) + 
  geom_line() + 
  facet_wrap(~ cluster_kmeans_5)

ggplotly(g)
```
